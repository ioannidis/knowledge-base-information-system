package eu.ioannidis.vulnerabilityservice.controllers;

import com.google.gson.Gson;
import eu.ioannidis.vulnerabilityservice.models.entities.VulnerabilityEntity;
import eu.ioannidis.vulnerabilityservice.models.requests.VulnerabilityRequest;
import eu.ioannidis.vulnerabilityservice.models.requests.VulnerabilityUpdateRequest;
import eu.ioannidis.vulnerabilityservice.models.responses.VulnerabilityResponse;
import eu.ioannidis.vulnerabilityservice.models.valueobjects.vulnerabiltyfilters.VulnerabilityFilters;
import eu.ioannidis.vulnerabilityservice.services.VulnerabilityService;
import eu.ioannidis.vulnerabilityservice.utils.enums.StatusEnum;
import eu.ioannidis.vulnerabilityservice.utils.feignclients.CommentFeignClient;
import eu.ioannidis.vulnerabilityservice.utils.feignclients.InfrastructureFeignClient;
import eu.ioannidis.vulnerabilityservice.utils.feignclients.UserFeignClient;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.oauth2.provider.OAuth2Authentication;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.util.*;

@RestController
@RequestMapping(VulnerabilityController.BASE_URL)
public class VulnerabilityController {

    final static String BASE_URL = "/v1/vulnerabilities";

    private VulnerabilityService vulnerabilityService;

    private InfrastructureFeignClient infrastructureFeignClient;

    private UserFeignClient userFeignClient;

    private CommentFeignClient commentFeignClient;

    public VulnerabilityController(VulnerabilityService vulnerabilityService,
                                   InfrastructureFeignClient infrastructureFeignClient,
                                   UserFeignClient userFeignClient,
                                   CommentFeignClient commentFeignClient) {
        this.vulnerabilityService = vulnerabilityService;
        this.infrastructureFeignClient = infrastructureFeignClient;
        this.userFeignClient = userFeignClient;
        this.commentFeignClient = commentFeignClient;
    }

    @GetMapping()
    public Page<VulnerabilityEntity> getVulnerabilities(
            @RequestParam(required = false) String page,
            @RequestParam(required = false) String showPerPage,
            @RequestParam(required = false) String sort,
            @RequestParam(required = false) String filters) {

        System.out.println("=====================================");
        System.out.println(page);
        System.out.println(showPerPage);
        System.out.println(sort);
        System.out.println(filters);

        Gson gson = new Gson();
        VulnerabilityFilters filtersDeserialization = gson.fromJson(filters, VulnerabilityFilters.class);
        System.out.println(filtersDeserialization);
        System.out.println("=====================================");

        Sort sortBy;
        if (sort.equalsIgnoreCase("DESC"))
            sortBy = Sort.by("createdBy").descending();
        else {
            sortBy = Sort.by("createdBy").ascending();
        }

        Pageable pageable = PageRequest.of(Integer.parseInt(page), Integer.parseInt(showPerPage), sortBy);

        return vulnerabilityService.findAll(pageable, filtersDeserialization);
//        return vulnerabilityService.findAll(pageable);
    }

    @GetMapping("/top10")
    public Collection<VulnerabilityEntity> getTop10Vulnerabilities() {
        return vulnerabilityService.findTop10ByOrderByModifiedAtDesc();
    }

    @GetMapping("/opened")
    public Collection<VulnerabilityEntity> getOpenVulnerabilities() {
        List<StatusEnum> statusEnumList = new ArrayList<>(Arrays.asList(StatusEnum.OPEN, StatusEnum.OPENIGNORED));
        return vulnerabilityService.findAllByStatusInOrderByModifiedAtDesc(statusEnumList);
    }

    @GetMapping("/fixed")
    public Collection<VulnerabilityEntity> getFixedVulnerabilities() {
        List<StatusEnum> statusEnumList = new ArrayList<>(Arrays.asList(StatusEnum.FIXED));
        return vulnerabilityService.findAllByStatusInOrderByModifiedAtDesc(statusEnumList);
    }

    @GetMapping("/closed")
    public Collection<VulnerabilityEntity> getClosedVulnerabilities() {
        List<StatusEnum> statusEnumList = new ArrayList<>(Arrays.asList(StatusEnum.CLOSED, StatusEnum.CLOSEDIGNORED));
        return vulnerabilityService.findAllByStatusInOrderByModifiedAtDesc(statusEnumList);
    }

    @GetMapping("/{id}")
    public ResponseEntity<VulnerabilityResponse> getVulnerability(HttpServletRequest request, @PathVariable String id) {

        return vulnerabilityService.findById(UUID.fromString(id))
        .map(vulnerability -> {
            System.out.println(vulnerability);
            VulnerabilityResponse response = new VulnerabilityResponse();
            response.setId(vulnerability.getId());
            response.setStatus(vulnerability.getStatus());
            response.setCvss(vulnerability.getCvss());
            response.setSystemReportId(vulnerability.getSystemReportId());
            response.setTitle(vulnerability.getTitle());
            response.setDescription(vulnerability.getDescription());
            response.setSolution(vulnerability.getSolution());
            response.setReferences(vulnerability.getReferences());
            response.setAuthor(userFeignClient.getUser(vulnerability.getCreatedBy().toString(), request.getHeader("Authorization") ).getBody());
            response.setProduct(infrastructureFeignClient.getProduct(vulnerability.getProduct().toString(), request.getHeader("Authorization")).getBody());
            response.setOem(infrastructureFeignClient.getOem(vulnerability.getOem().toString(), request.getHeader("Authorization")).getBody());
            response.setSystem(infrastructureFeignClient.getSystem(vulnerability.getSystem().toString(), request.getHeader("Authorization")).getBody());
            response.setAction(vulnerability.getAction());
            response.setCreatedAt(vulnerability.getCreatedAt());
            response.setModifiedAt(vulnerability.getModifiedAt());
            response.setCreatedBy(userFeignClient.getUser(vulnerability.getCreatedBy().toString(), request.getHeader("Authorization") ).getBody());
            response.setModifiedBy(userFeignClient.getUser(vulnerability.getModifiedBy().toString(), request.getHeader("Authorization") ).getBody());


            // Set comments to response
            response.setComments(commentFeignClient.getCommentByVulnerability(vulnerability.getId().toString(), request.getHeader("Authorization")).getBody());

            return new ResponseEntity<>(response, HttpStatus.OK);
        })
        .orElse(new ResponseEntity<VulnerabilityResponse>(HttpStatus.NOT_FOUND));
    }

    @PostMapping()
    public VulnerabilityEntity saveVulnerability(OAuth2Authentication auth2Authentication, @Valid @RequestBody VulnerabilityRequest vulnerabilityRequest) {

        System.out.println(vulnerabilityRequest);
        LinkedHashMap<String, Object> principal =  (LinkedHashMap<String, Object>) auth2Authentication.getPrincipal();

        VulnerabilityEntity vulnerabilityEntity = new VulnerabilityEntity();
        vulnerabilityEntity.setStatus(vulnerabilityRequest.getStatus());
        vulnerabilityEntity.setCvss(vulnerabilityRequest.getCvss());
        vulnerabilityEntity.setSystemReportId(vulnerabilityRequest.getSystemReportId());
        vulnerabilityEntity.setTitle(vulnerabilityRequest.getTitle());
        vulnerabilityEntity.setDescription(vulnerabilityRequest.getDescription());
        vulnerabilityEntity.setReferences(vulnerabilityRequest.getReferences());
        vulnerabilityEntity.setAction(vulnerabilityRequest.getAction());
        vulnerabilityEntity.setAuthor(UUID.fromString((String)principal.get("id")));
        vulnerabilityEntity.setProduct(vulnerabilityRequest.getProduct());
        vulnerabilityEntity.setSystem(vulnerabilityRequest.getSystem());
        vulnerabilityEntity.setOem(vulnerabilityRequest.getOem());
        vulnerabilityEntity.setSolution(vulnerabilityRequest.getSolution());

        return vulnerabilityService.save(vulnerabilityEntity);
    }

    @PutMapping("/{id}")
    public ResponseEntity updateVulnerability(@PathVariable String id, @RequestBody VulnerabilityUpdateRequest vulnerabilityRequest) {
        System.out.println("++++++++++++++++++++++++++++++++++++++++++");
        System.out.println(vulnerabilityRequest);
        System.out.println("++++++++++++++++++++++++++++++++++++++++++");
        return vulnerabilityService.findById(UUID.fromString(id)).map(vulnerability -> {
            vulnerability.setStatus(vulnerabilityRequest.getStatus());
            vulnerability.setCvss(vulnerabilityRequest.getCvss());
            vulnerability.setSystemReportId(vulnerabilityRequest.getSystemReportId());
            vulnerability.setTitle(vulnerabilityRequest.getTitle());
            vulnerability.setDescription(vulnerabilityRequest.getDescription());
            vulnerability.setSolution(vulnerabilityRequest.getSolution());
            vulnerability.setReferences(vulnerabilityRequest.getReferences());
            vulnerability.setProduct(vulnerabilityRequest.getProduct());
            vulnerability.setOem(vulnerabilityRequest.getOem());
            vulnerability.setSystem(vulnerabilityRequest.getSystem());
            vulnerability.setAction(vulnerabilityRequest.getAction());
            vulnerability.setEnabled(vulnerabilityRequest.isEnabled());

            return new ResponseEntity<>(vulnerabilityService.save(vulnerability), HttpStatus.OK);
        })
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    @PatchMapping("/{id}")
    public ResponseEntity patchVulnerability(@PathVariable String id, @RequestBody String vulnerabilityJson) {
        Gson gson = new Gson();
        VulnerabilityUpdateRequest vulnerabilityUpdateRequest = gson.fromJson(vulnerabilityJson, VulnerabilityUpdateRequest.class);

        return vulnerabilityService.findById(UUID.fromString(id)).map(vulnerability -> {
            vulnerability.setEnabled(vulnerabilityUpdateRequest.isEnabled());

            return new ResponseEntity<>(vulnerabilityService.save(vulnerability), HttpStatus.OK);
        })
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    @DeleteMapping("/{id}")
    public void deleteVulnerability(@PathVariable UUID id) {
        vulnerabilityService.deleteById(id);
    }

    public boolean existById(String id) {
        return vulnerabilityService.existById(UUID.fromString(id));
    }

    @GetMapping("/count")
    public Map<String, Long> count(@RequestParam(required = false) String status) {

        return Optional.ofNullable(status)
                .map(x -> {
                    Map<String, Long> count = new HashMap<>();
                    StatusEnum statusEnum = StatusEnum.valueOf(status.toUpperCase());
                    count.put("count", vulnerabilityService.countVulnerabilityEntitiesById(statusEnum));
                    return count;
                })
                .orElseGet(() -> {
                    Map<String, Long> count = new HashMap<>();
                    count.put("count", vulnerabilityService.count());
                    return count;
                });
    }

}
