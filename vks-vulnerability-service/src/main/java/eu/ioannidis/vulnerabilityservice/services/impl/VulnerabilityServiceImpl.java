package eu.ioannidis.vulnerabilityservice.services.impl;

import eu.ioannidis.vulnerabilityservice.models.entities.VulnerabilityEntity;
import eu.ioannidis.vulnerabilityservice.models.valueobjects.vulnerabiltyfilters.VulnerabilityFilters;
import eu.ioannidis.vulnerabilityservice.repositories.VulnerabilityRepository;
import eu.ioannidis.vulnerabilityservice.services.VulnerabilityService;
import eu.ioannidis.vulnerabilityservice.utils.enums.StatusEnum;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Slice;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.transaction.Transactional;
import java.util.*;

@Transactional
@Service
public class VulnerabilityServiceImpl implements VulnerabilityService {

    private VulnerabilityRepository vulnerabilityRepository;

    @Autowired
    public VulnerabilityServiceImpl(VulnerabilityRepository vulnerabilityRepository) {
        this.vulnerabilityRepository = vulnerabilityRepository;
    }

    @Override
    public List<VulnerabilityEntity> findAll() {
        return vulnerabilityRepository.findAll();
    }

    public Page<VulnerabilityEntity> findAll(Pageable pageable) {
        return vulnerabilityRepository.findAll(pageable);
    }

    public Page<VulnerabilityEntity> findAll(Pageable pageable, VulnerabilityFilters vulnerabilityFilters) {
        return vulnerabilityRepository.findAll((Specification<VulnerabilityEntity>) (root, query, criteriaBuilder) -> {
            List<Predicate> predicates = new ArrayList<>();

            if(vulnerabilityFilters.getStatuses() != null && !vulnerabilityFilters.getStatuses().isEmpty()) {
                predicates.add(root.get("status").in(vulnerabilityFilters.getStatuses()));
            }

            if(vulnerabilityFilters.getSystems() != null && !vulnerabilityFilters.getSystems().isEmpty()) {
                predicates.add(root.get("system").in(vulnerabilityFilters.getSystems()));
            }

            if(vulnerabilityFilters.getProducts() != null && !vulnerabilityFilters.getProducts().isEmpty()) {
                predicates.add(root.get("product").in(vulnerabilityFilters.getProducts()));
            }

            if(vulnerabilityFilters.getOems() != null && !vulnerabilityFilters.getOems().isEmpty()) {
                predicates.add(root.get("oem").in(vulnerabilityFilters.getOems()));
            }

            return criteriaBuilder.and(predicates.toArray(new Predicate[predicates.size()]));
        }, pageable);
    }

    @Override
    public List<VulnerabilityEntity> findTop10ByOrderByModifiedAtDesc() {
        return vulnerabilityRepository.findTop10ByOrderByModifiedAtDesc();
    }

//    @Override
//    public List<VulnerabilityEntity> findAllByStatusOrStatusOrderByModifiedAtDesc(StatusEnum statusOne, StatusEnum statusTwo) {
//        return vulnerabilityRepository.findAllByStatusOrStatusOrderByModifiedAtDesc(statusOne, statusTwo);
//    }

    @Override
    public List<VulnerabilityEntity> findAllByStatusInOrderByModifiedAtDesc(List<StatusEnum> statusEnums) {
        return vulnerabilityRepository.findAllByStatusInOrderByModifiedAtDesc(statusEnums);
    }

    @Override
    public Optional<VulnerabilityEntity> findById(UUID id) {
        return vulnerabilityRepository.findById(id);
    }

    @Override
    public <S extends VulnerabilityEntity> S save(S entity) {
        return vulnerabilityRepository.save(entity);
    }

    @Override
    public void deleteById(UUID id) {
        vulnerabilityRepository.deleteById(id);
    }

    @Override
    public boolean existById(UUID id) {
        return vulnerabilityRepository.existsById(id);
    }

    @Override
    public long count() {
        return vulnerabilityRepository.count();
    }

    @Override
    public long countVulnerabilityEntitiesById(StatusEnum status) {
        return vulnerabilityRepository.countVulnerabilityEntitiesById(status);
    }
}
